import hashlib

def sha1_hash(text):
    return hashlib.sha1(text.encode()).hexdigest()

def create_rainbow_table(wordlist_path):
    rainbow_table = {}
    with open(wordlist_path, 'r', errors='ignore') as wordlist_file:
        for line in wordlist_file:
            password = line.strip()
            hashed_password = sha1_hash(password)
            rainbow_table[hashed_password] = password
    return rainbow_table

def crack_sha1_hash(target_hash, rainbow_table):
    return rainbow_table.get(target_hash, None)

# Example usage
if __name__ == "__main__":
    linkedin_hashes_path = "LinkedIn_HalfMillionHashes.txt"
    rockyou_wordlist_path = "rockyou.txt"
    newpassword_path = "matched.txt"

    # Create rainbow table
    rainbow_table = create_rainbow_table(rockyou_wordlist_path)

    # Crack LinkedIn hashes and save matches to newpassword file
    with open(linkedin_hashes_path, 'r') as linkedin_hashes_file:
        linkedin_word_count = sum(1 for line in linkedin_hashes_file)
        linkedin_hashes_file.seek(0)  # Reset file pointer

        with open(newpassword_path, 'w') as newpassword_file:
            for line in linkedin_hashes_file:
                target_hash = line.strip()
                password = crack_sha1_hash(target_hash, rainbow_table)
                if password:
                    newpassword_file.write(f"{target_hash}: {password}\n")

    # Print the word counts
    print(f"Number of words in LinkedIn hash file: {linkedin_word_count}")
    print(f"Number of words in RockYou file: {len(rainbow_table)}")
    print(f"Number of words in Matched file: {len(open(newpassword_path).readlines())}")

    print("Matched hashes saved.")
    
